import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

function SignUp() {
  const [formData, setFormData] = useState({ name: '', email: '', password: '' });
  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
  const [passwordStrength, setPasswordStrength] = useState('');
  const [passwordColor, setPasswordColor] = useState('');  
  const evaluatePasswordStrength = (pwd) => {
    let strength = 0;
    if (pwd.length >= 8) strength++;
    if (/[A-Z]/.test(pwd)) strength++;
    if (/[a-z]/.test(pwd)) strength++;
    if (/\d/.test(pwd)) strength++;
    if (/[@$!%*?&]/.test(pwd)) strength++;

    if (strength <= 2) {
      setPasswordStrength('–°–ª–∞–±—ã–π');
      setPasswordColor('red');
    } else if (strength === 3 || strength === 4) {
      setPasswordStrength('–°—Ä–µ–¥–Ω–∏–π');
      setPasswordColor('orange');
    } else {
      setPasswordStrength('–°–∏–ª—å–Ω—ã–π');
      setPasswordColor('green');
    }
  };
  const [showPassword, setShowPassword] = useState(false);
  const navigate = useNavigate();
  const [error, setError] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    if (name === 'password') evaluatePasswordStrength(value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const { name, email, password } = formData;

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (!name || !email || !password) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.');
      return;
    }
    if (!passwordRegex.test(password)) {
      setError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, —Ü–∏—Ñ—Ä—É –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª.');
      return;
    }

    try {
      await axios.post('http://localhost:3001/api/auth/register', formData);
      alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
      setFormData({ name: '', email: '', password: '' });
      setError('');
      navigate('/login');
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.');
    }
  };

  return (
    <div className="container mt-5">
      <h2 className="mb-4">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
      {error && <div className="alert alert-danger">{error}</div>}
      <form onSubmit={handleSubmit}>
        <input
          name="name"
          type="text"
          placeholder="–ò–º—è"
          value={formData.name}
          onChange={handleChange}
          className="form-control mb-3"
        />
        <input
          name="email"
          type="email"
          placeholder="Email"
          value={formData.email}
          onChange={handleChange}
          className="form-control mb-3"
        />
        <div className="input-group mb-3">
          <input
            name="password"
            type={showPassword ? 'text' : 'password'}
            placeholder="–ü–∞—Ä–æ–ª—å"
            value={formData.password}
            onChange={handleChange}
            className="form-control"
          />
          <button
            type="button"
            className="btn btn-outline-secondary"
            onClick={() => setShowPassword((prev) => !prev)}
            tabIndex={-1}
          >
            {showPassword ? 'üôà' : 'üëÅÔ∏è'}
          </button>
        </div>
        {formData.password && (
          <small style={{ color: passwordColor }}>
            –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è: {passwordStrength}
          </small>
        )}
        <button type="submit" className="btn btn-success w-100">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
      </form>
    </div>
  );
}

export default SignUp;
